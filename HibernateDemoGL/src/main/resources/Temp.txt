CRUD OPERATIONS:

C=> Create, R=> Read, U-> Update, D-> Delete

Entity Class => Class that interacts with database.
                //Employee and Employee Depart


HQL => hibernate query language

HIBERNATE
//Embeddable objects ? => next class
//Associations & Relationships

//Transaction, concurrency
//spring integeration


// EHCache => in memory /disc
// OSCache => memory, disc , expiration policy(10 minutes),
                    10L => 10L DB request
                    1request => 1sql query
                    2nd-1L => No Sql Query => fetch from cache
                    1L- 10L => fetch from cache


             <=Spring(basics)=>


           Intro
           Configuration
            XML
            Class
           Mapping=> one to one, many to one, many to many
           Annotations => @Entity , @Id,
           CRUD Operations
           Transactions
           Isolation levels
           ACID
           CACHE

           <<=====Spring BASICS======>>
           SPRING
           IoC => inversion of control
           Dependency Injection
           AOP
           Spring Modules
           Spring boot
           Spring MVC
           Integration => with any ORM tool
           Testing



Introduction to Spring => Set of code built on JAVA.

class A{
   A(Student s){
   }
}

class B{
    B(Student s){
    }
}

IOC=> Inversion of control

lifecycle=>

CREATE => new
Initiliaze
USE => CODE  // developers
REMOVING => GC


obj p;

A{
    A(obj p){
    }

    // 2 lines
}

B{
    B(p)

    // 7 lines
}

C{

    C(p){
    }
    // 10 lines
}

IoC =>
1. IoC container manages creation and lifecycle of application components(Objects or Beans).
    Objects in  java and managed by spring IoC are called Beans.

    Initiate an object => Spring => memory leaks => Object is still in code , but not in use and utilizing memory.

    Create business logic
    Run
    Test
    Deploy

    Two packages =>1. org.springframework.beans
                   2. org.springframework.context

2. Dependency Injection => (Part/ subset of IoC)
    reduce the coupling between the components of application.
       injecting the dependencies to a class rather than a class creating its own dependency.

3. AOP => Aspect Oriented Programming
=> Transactions => multiple components
=> Logging      => multiple components
=> Security     => multiple components
=> Validations  =>

AOP allows developers to modularize the code. it can reusable.

4. Spring modules=>
        a. Spring core module => IoC container => bean factory and application context
        b. Spring Data Access/Integration => to connection with JDBC
        c. Spring security => logging , authentication and Auth
       many more.

5. Spring boot (API)=> extension of Spring . It is more advance version that provides auto configurations and
                    reduce setup.

6. Spring MVC (WEB)=> Spring Model view controller use to build web application. MEAN/ MERN

7. Integration => hibernate, external logging tool etc etc

8. Testing => Junit Test cases to write Unit test cases.





 hibernate => jdbc => Database(Mysql)


Create Database session => LocalSessionFactoryBean
    => Db connection => DriverManagerDataSource


if(Db Connection ==true){
start DbSession; // LocalSessionFactoryBean
}


1. HibernateTemplate => Hibernate

EntityManager => JPA
application.properties
Configuration using classes.
Autowiring
Bean scopes
annotation based configurations
mapping, ComponentScan


Bean scopes:
1. singleton => single instance per Spring IOC container(context) [default]
2. Prototype => single bean with many instances
3. request => http request
4. session => http request
5. global-session => http request

next session

application.properties
Configuration using classes.
annotation based configurations
Spring jdbc
Spring DAO

spring AOP
spring MVC
springboot


Bean Scopes:

1. Singleton (default): for one application context , a single bean
2. Prototype: new instance per request from context
3. request: Web application. New bean / request
4. session: New bean / request : HTTP based,: 1 bean per session
5. Application (global-session): single bean across all users and sessions.
                1. created when application is started and destroyed when app is shut down.
                    Logging.

Issues with xml approach:
1. lack of understanding.
2. difficulty in Bean scanning and detection.
3. naming conflicts.
4. @Component=> basic implement.


API => application programming interface.
        // self powered code, supporting any client.

      1. Exposed End point. (get, save) => class => Bean , HTTP calls, dependent HTTP session.


xml => configurations => @Configuration

@Qualifier => to avoid ambi
@Autowired => Dependency Injection

Dependency Injection =>

Spring Core module is responsible for dependency Injection.
    1. Constructor
    2. Setter

Ways to create Bean:
    1. Annotation =>
                    @Bean
                    @Component

    2. Xml Configurations =>
                    <bean id="" class=""/>

Autowiring =>

1. No =>
2. byName => using setter method.
3. byType => Setter method by type of bean.
4. Constructer =>
5. autoDetect => contructor and byType


Spring JBDC
=> application.properties
=> connection to DB

Difference btw @Controller and @RestController
1. @RestController = @Controller and @ResponseBody
2. We can return view in @Controller, but in @RestController only Response bodies(XML based or JSON based)


Repository=> interface extending JPARepository or CRUDRepository
DAO => Data Access Object

Ways to define a bean=>
@Bean, @Component, @Controller, @Repository, @Service

@Configurations => 1. used for java - based app configurations.
                    2. @Configuration classes will be initialized first.

Dependency Injection:
1. passing object in constructor
2. @Autowired
3. @Value to inject properties

AOP =>
[Logging]
Aspect => is a module that encapsulates a concern(logging, transactions etc etc)
Join Points => Join points are defined in terms of execution points in code. Eg: method invocation
                , field access, exception handling
 [@Log => className, message, type]

Advice => it is an actual action => code.
                before a method, after a method and around a method.

                Target Method => actual code.

                1. Before Advice => Executes before the target method is called.
                2. After Returning Advice => Executes after the target method is completed successfully.
                3. After Throwing Advice => Executes if the target method throws Exception.
                4. After (Finally) Advice => Executes regardless of the outcome of target method.
                5. Around Advice => allows you to perform actions both before and after the method invocation.



1. Spring AOP, AspectJ


AOP =>

Join Point
Advice
Target Method
Weaving => Applying aspects(Annotation) to a target object(method, class etc).
        a. Compile Time Weaving: occurs during compilation of code => AspectJ
        b. Load time weaving: while loading classes to JVM
        c. Runtime: while runtime of code=> Spring AOP

PointCut => Group of join points where you advice should be executed. using expression.


CACHE:

1. for cache, AOP intercept method calls and checks
whether the result of this method is already present or not.

2. @Cacheable, @CachePut, @CacheEvict, @CacheConfig

3. Spring provides Cache Abstraction layer that allows to integrate different cache providers.

4. Cache Manager: RedisCacheManager, ConcurrentMapCacheManager

5. @CacheEvict

6. Key Generation => key->Value -> String/Integer -> Object

                    "country"->[<LIST>]

                    cache.get("country") => LIST of country.

7. @Cacheable or @CachePut

8. Benefits:
        1. less response times. save resources.


MONITORING:

1. method invocation,
2. resource usage,
3. error occurences


PROFILING:

1. Logs
2. Performance Metrix of APIs


Spring Security:

X user is sending Request

interceptors =>

Authentication and Authorization
Access Control
Security Filters

SPRING MVC:
Model-View-Controller

used for web application:   MEAN, MERN

Struts
Spring boot

Django

Laravel
MEAN Stack:
    M=> MongoDb(NoSql DB)
    E=> ExpressJs(Framework for Node.Js)
    A=> Angular Js(Front End)
    N=> Node.Js(backend)

MERN Stack:
    M=> MongoDb(NoSql DB)
    E=> ExpressJs(Framework for Node.Js)
    R=> React Js(Front End)
    N=> Node.Js(backend)

Model:
java classes/ objects
data/ POJOs / Java Beans
Controller is used to populate model.
return view.

/get/books => {controller => service => POJOs => controller}=> Database => FE(VIEW(DATA + HTML)=> browser)

View:
responsible for presenting the data from Model to the user.
JSP, HTML, Thymeleaf

Controller:

1. View -> Controller -> Model
2. @Controller
3. return Objects(ModelAndView)

Dispatcher Servlet:(First receives the request)
1. it is called front controller of a Spring MVC application.
2. It intercepts the incoming request and serves as entry point
3. It consults HandlerMapping to determine which controller should handle the particular request.

Handler Mapping:
1. responsible for mapping URLs to sepcific controller.

View Resolver:
1. resolves logical view returned by controller to actual view implementation.
2. can be configured in Spring configuration file

Interceptor:
1. performs operation before and after the actualrequest processing.
2. It is useful for authentication, logging, or modifying request/responses.

Forms Handler:
data binding to forms using spring Spring MVC

Validations:
@Valid, @ModelAttribute

Internalization and localization
multiple regions, languages

Exception handling:
@ExceptionHandler


Architecture:

Presentation:
Controller
View

Business Logic:
Service Classes

Data Access:
Repositories

Versioning:
GIT
versioning of APIs


Sessions:

managing user sessions => maintain state of the user.
login =>  create, Delete, get, store information related user(tokens, phoneNumber etc)
logout => browse the products .

HTTP CALLS => sharing data over network(WEB) using protocols
HTTP protocols => GET(READ), POST(SAVE), PUT/PATCH(EDIT), DELETE

METHOD=>GET(READ), POST(SAVE), PUT/PATCH(EDIT), DELETE
REQUEST BODY
RESPONSE BODY
REQUEST PARAM
URL PARAM
HEADERS

user A => POST(T1), GET(T2)

stateless

session management

session objects => unique key => sessionId

userA[2hours] => sessionA[2hours] => sessionId

HTTPSession

Spring Session

Custom Session Management

Cookie => login details[authentication Token], user Personalizations etc etc


HTTP Sessions => cookies for session management
@SessionAttributes


HTTPS(Secure Sockets Layer) => sessionId is encrypted

Session Timeout=> how long a user will stay in our system with doing any activity
<session-config>
    <session-timeout>30</session-timeout>
</session-config>

Session Tracking Modes=>
    COOKIE=>
    URL=>
    SSl => transferring cookies but in encryption mode.


Distributed Session=>

server.session.cookie.name= XYZ


HTTP STATUS CODES:

Request GET/POST => Response(200/201)
indicate the outcome of the request.

1xx => NOT USED

2xx(Successful)
200 Ok => Request was successfully processed by server and response is received
201 Created => Request has request to create new resourse
204 No Content => Request is successful but no data returned in response. DELETE

3xx(Redirection)
301 Moved Permanently: The requested resource has been permanently moved to new URL.
302 Found : The requested resource is temporarily moved to new URL.

4xx(Client Side)
400 Bad Request: request cannot be understood or some missing required parameters.
401 unauthorized: Authentication is required or the provided credentials are invalid.
403 Forbidden: server understood the request, but it refuses to fulfill due to authentication or authorization reasons
404 Not Found: The requested resource could not be found

5xx(Server Error)
500 Internal Server Error: A generic error message indicating that unexpected error occured.
503 Service Unavailable: The server is temporaarily unable to handle the request.












